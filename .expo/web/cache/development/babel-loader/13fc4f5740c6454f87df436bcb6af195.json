{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport DatePicker from 'react-native-datepicker';\nimport { useForm, Controller } from \"react-hook-form\";\nimport { environment } from \"../../environment/environment\";\nimport styles from \"../styles.js\";\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport KeyboardAvoidingWrapper from \"../KeyboardAvoidingWrapper\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction SignUp() {\n  var loginValidationSchema = yup.object().shape({\n    name: yup.string().required('Name is required'),\n    email: yup.string().email('Please enter valid email').required('Email is required'),\n    password: yup.string().required('Password is required')\n  });\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      error = _React$useState2[0],\n      setError = _React$useState2[1];\n\n  var _useForm = useForm({\n    defaultValues: {\n      name: '',\n      email: '',\n      password: ''\n    }\n  }),\n      control = _useForm.control,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.formState.errors;\n\n  var onRegisterTap = function onRegisterTap(data) {\n    Alert.alert(\"Reset Password?\", \"An email with a temporary password will be sent to your email address.\", [{\n      text: \"No\",\n      onPress: function onPress() {\n        return console.log(\"No Pressed\");\n      },\n      style: \"No\"\n    }, {\n      text: \"Cancel\",\n      onPress: function onPress() {\n        return console.log(\"Cancel Pressed\");\n      }\n    }, {\n      text: \"I agree to the Terms\",\n      onPress: function onPress() {\n        return agreeOption(data);\n      }\n    }]);\n  };\n\n  var agreeOption = function agreeOption(data) {\n    console.log(\"Agree Pressed\");\n    console.log(data);\n  };\n\n  return _jsx(KeyboardAvoidingWrapper, {\n    children: _jsx(Formik, {\n      initialValues: {\n        date: '',\n        name: '',\n        email: '',\n        password: ''\n      },\n      validateOnMount: true,\n      onSubmit: function onSubmit(values) {\n        return onRegisterTap(values);\n      },\n      validationSchema: loginValidationSchema,\n      children: function children(_ref) {\n        var handleChange = _ref.handleChange,\n            handleBlur = _ref.handleBlur,\n            handleSubmit = _ref.handleSubmit,\n            values = _ref.values,\n            touched = _ref.touched,\n            errors = _ref.errors,\n            isValid = _ref.isValid;\n        return _jsxs(View, {\n          style: styles.container,\n          children: [_jsx(DatePicker, {\n            style: styles.datePicker,\n            date: values.date,\n            mode: \"date\",\n            placeholder: \"Date of Birth\",\n            format: \"YYYY-MM-DD\",\n            minDate: \"1920-05-01\",\n            maxDate: \"2020-08-01\",\n            confirmBtnText: \"Confirm\",\n            cancelBtnText: \"Cancel\",\n            customStyles: {\n              dateIcon: {\n                display: 'none'\n              },\n              dateInput: {\n                borderWidth: 0,\n                alignItems: 'flex-start',\n                justifyContent: 'flex-end'\n              },\n              dateText: {\n                color: 'white',\n                fontSize: 16\n              },\n              placeholderText: {\n                color: 'white',\n                fontSize: 16\n              }\n            },\n            onDateChange: handleChange('date'),\n            onBlur: handleBlur('date'),\n            value: values.date\n          }), _jsxs(Text, {\n            children: [\"date: \", values.date]\n          }), _jsx(TextInput, {\n            style: [styles.formInput, {\n              borderColor: errors.name && touched.name ? 'red' : 'white'\n            }],\n            placeholder: \"Display Name*\",\n            placeholderTextColor: \"white\",\n            className: \"form-input form-input-placeholder\",\n            onChangeText: handleChange('name'),\n            onBlur: handleBlur('name'),\n            value: values.name\n          }), errors.name && touched.name && _jsxs(Text, {\n            children: [errors.name, \" value \", errors.name && touched.name ? 'true' : 'false']\n          }), _jsx(TextInput, {\n            style: [styles.formInput, {\n              borderColor: errors.email && values.email ? 'red' : 'white'\n            }],\n            placeholder: \"Email*\",\n            placeholderTextColor: \"white\",\n            className: \"form-input\",\n            onChangeText: handleChange('email'),\n            onBlur: handleBlur('email'),\n            value: values.email\n          }), errors.email && touched.email && _jsxs(Text, {\n            children: [errors.email, \" value \", errors.email && values.email ? 'true' : 'false']\n          }), _jsxs(Text, {\n            children: [values.email, \" value\"]\n          }), _jsx(TextInput, {\n            style: [styles.formInput, {\n              borderColor: errors.password && touched.password ? 'red' : 'white'\n            }],\n            placeholder: \"Password*\",\n            placeholderTextColor: \"white\",\n            className: \"form-input\",\n            secureTextEntry: true,\n            onChangeText: handleChange('password'),\n            onBlur: handleBlur('password'),\n            value: values.password\n          }), errors.password && touched.password && _jsxs(Text, {\n            children: [errors.password, \" value \", errors.password && touched.password ? 'true' : 'false']\n          }), _jsx(Text, {\n            style: styles.error,\n            class: \"error\",\n            textWrap: \"true\",\n            children: error\n          }), _jsx(View, {\n            style: {\n              opacity: !isValid ? '0.5' : '1'\n            },\n            children: _jsx(TouchableOpacity, {\n              style: styles.buttonSignUp,\n              disabled: !isValid,\n              onPress: handleSubmit,\n              children: _jsx(Text, {\n                style: styles.textSignUp,\n                children: \"Register\"\n              })\n            })\n          })]\n        });\n      }\n    })\n  });\n}\n\nexport default SignUp;","map":{"version":3,"sources":["C:/Users/cathy/Desktop/winter2022/internship/Puggum-React-Login/src/components/SignUp/SignUp.js"],"names":["React","DatePicker","useForm","Controller","environment","styles","Formik","yup","KeyboardAvoidingWrapper","SignUp","loginValidationSchema","object","shape","name","string","required","email","password","useState","error","setError","defaultValues","control","handleSubmit","errors","formState","onRegisterTap","data","Alert","alert","text","onPress","console","log","style","agreeOption","date","values","handleChange","handleBlur","touched","isValid","container","datePicker","dateIcon","display","dateInput","borderWidth","alignItems","justifyContent","dateText","color","fontSize","placeholderText","formInput","borderColor","opacity","buttonSignUp","textSignUp"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Alert, TouchableOpacity, Image, StyleSheet, Text, View, TextInput } from \"react-native\";\r\n/*https://github.com/xgfe/react-native-datepicker*/\r\nimport DatePicker from 'react-native-datepicker';\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { environment } from \"../../environment/environment\";\r\nimport styles from \"../styles.js\";\r\nimport { Formik } from 'formik';\r\nimport * as yup from 'yup';\r\nimport KeyboardAvoidingWrapper from \"../KeyboardAvoidingWrapper\";\r\n\r\n/**\r\n * @description This class is used to display the log in form\r\n */\r\nfunction SignUp() {\r\n    const loginValidationSchema = yup.object().shape({\r\n        name: yup.string().required('Name is required'),\r\n        email: yup.string().email('Please enter valid email').required('Email is required'),\r\n        password: yup.string().required('Password is required'),\r\n    });\r\n\r\n    const [error, setError] = React.useState(null);\r\n\r\n    const { control, handleSubmit, formState: { errors } } = useForm({\r\n        defaultValues: {\r\n            name: '',\r\n            email: '',\r\n            password: ''\r\n        }\r\n    });\r\n\r\n    const onRegisterTap = (data) => {\r\n        Alert.alert(\r\n            \"Reset Password?\",\r\n            \"An email with a temporary password will be sent to your email address.\",\r\n            [\r\n                {\r\n                    text: \"No\",\r\n                    onPress: () => console.log(\"No Pressed\"),\r\n                    style: \"No\"\r\n                },\r\n                {\r\n                    text: \"Cancel\",\r\n                    onPress: () => console.log(\"Cancel Pressed\")\r\n                },\r\n                {\r\n                    text: \"I agree to the Terms\",\r\n                    onPress: () => agreeOption(data)\r\n                }\r\n            ]\r\n        );\r\n    }\r\n\r\n    const agreeOption = (data) => {\r\n        console.log(\"Agree Pressed\");\r\n        console.log(data);\r\n        // this._httpClient.post(\r\n        //     mainenv['authHost']+'api/user/post/registerGoogle',\r\n        //     this.registration.getRawValue())\r\n        //   .toPromise().then(result => {\r\n        //     if(result['status']=='valid') {\r\n        //       ApplicationSettings.setString(\"jwt\",result['data']['jwt']);\r\n        //       ApplicationSettings.setNumber(\"timer\",result['data']['timer']);\r\n        //       this.userService.updateTokenInDatabase();\r\n        //       this.userService.isAuthenticated(true);\r\n        //       this.router.navigate(['/tutorial']);\r\n        //     }\r\n        //     else {\r\n        //         console.log(result['error']);\r\n        //       }\r\n        //     });\r\n        //   }\r\n\r\n    }\r\n\r\n    /**\r\n       * @description render() returns a div \r\n       * @returns The div containing \r\n       */\r\n    return (\r\n        <KeyboardAvoidingWrapper>\r\n        <Formik\r\n            initialValues={{ date:'',name:'',email: '', password: '' }}\r\n            validateOnMount={true}\r\n            onSubmit={values => onRegisterTap(values)}\r\n            validationSchema={loginValidationSchema}>\r\n            {({ handleChange, handleBlur, handleSubmit, values, touched, errors, isValid }) => (\r\n                <View style={styles.container}>\r\n\r\n                    <DatePicker style={styles.datePicker}\r\n                        date={values.date}\r\n                        mode=\"date\"\r\n                        placeholder=\"Date of Birth\"\r\n                        format=\"YYYY-MM-DD\"\r\n                        minDate=\"1920-05-01\"\r\n                        maxDate=\"2020-08-01\"\r\n                        confirmBtnText=\"Confirm\"\r\n                        cancelBtnText=\"Cancel\"\r\n                        customStyles={{\r\n                            dateIcon: {\r\n                                display: 'none'\r\n                            },\r\n                            dateInput: {\r\n                                borderWidth: 0,\r\n                                alignItems: 'flex-start',\r\n                                justifyContent: 'flex-end'\r\n                            },\r\n                            dateText: {\r\n                                color: 'white',\r\n                                fontSize: 16,\r\n                            },\r\n                            placeholderText: {\r\n                                color: 'white',\r\n                                fontSize: 16\r\n                            },\r\n                        }}\r\n                        onDateChange={handleChange('date') }\r\n                        onBlur={handleBlur('date')}\r\n                        value={values.date}\r\n                    />\r\n                    <Text>date: {values.date}</Text>\r\n\r\n                    <TextInput\r\n                        style={[styles.formInput, { borderColor: (errors.name && touched.name) ? 'red' : 'white' }]}\r\n                        placeholder=\"Display Name*\"\r\n                        placeholderTextColor='white'\r\n                        className=\"form-input form-input-placeholder\"\r\n                        onChangeText={handleChange('name')}\r\n                        onBlur={handleBlur('name')}\r\n                        value={values.name} />\r\n                    {(errors.name && touched.name) && <Text>{errors.name} value {errors.name && touched.name ? 'true' : 'false'}</Text>}\r\n\r\n\r\n                    <TextInput\r\n                        style={[styles.formInput, { borderColor: (errors.email && values.email) ? 'red' : 'white' }]}\r\n                        placeholder=\"Email*\"\r\n                        placeholderTextColor='white'\r\n                        className=\"form-input\"\r\n                        onChangeText={handleChange('email')}\r\n                        onBlur={handleBlur('email')}\r\n                        value={values.email}\r\n                    />\r\n                    {(errors.email && touched.email) && <Text>{errors.email} value {errors.email && values.email ? 'true' : 'false'}</Text>}\r\n                    <Text>{values.email} value</Text>\r\n\r\n                    <TextInput\r\n                        style={[styles.formInput, { borderColor: (errors.password && touched.password) ? 'red' : 'white' }]}\r\n                        placeholder=\"Password*\"\r\n                        placeholderTextColor='white'\r\n                        className=\"form-input\"\r\n                        secureTextEntry={true}\r\n                        onChangeText={handleChange('password')}\r\n                        onBlur={handleBlur('password')}\r\n                        value={values.password}\r\n                    />\r\n                    {(errors.password && touched.password) && <Text>{errors.password} value {errors.password && touched.password ? 'true' : 'false'}</Text>}\r\n\r\n                    <Text style={styles.error} class=\"error\" textWrap=\"true\" >{error}</Text>\r\n                    \r\n                    <View style={{ opacity: (!isValid) ? '0.5' : '1' }}>\r\n                    <TouchableOpacity \r\n                        style={styles.buttonSignUp}\r\n                        disabled={!isValid}\r\n                        onPress={handleSubmit}>\r\n                        <Text style={styles.textSignUp}>Register</Text>\r\n                    </TouchableOpacity>\r\n                    </View>\r\n\r\n                    {/* <TouchableOpacity style={styles.buttonSignUpnwithAG}>\r\n                    <Text style={styles.textAG}>Sign up with Apple</Text>\r\n                </TouchableOpacity>\r\n                <TouchableOpacity style={styles.buttonSignUpnwithAG}>\r\n                    <Text style={styles.textAG}>Sign up with Google</Text>\r\n                </TouchableOpacity> */}\r\n                </View>\r\n            )}\r\n        </Formik>\r\n        </KeyboardAvoidingWrapper>\r\n    )\r\n}\r\nexport default SignUp;"]},"metadata":{},"sourceType":"module"}