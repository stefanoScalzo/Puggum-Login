{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { environment } from \"../../environment/environment\";\nimport styles from \"../styles.js\";\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction LogIn() {\n  var loginValidationSchema = yup.object().shape({\n    email: yup.string().email('Please enter valid email').required('Email is required'),\n    password: yup.string().required('Password is required')\n  });\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      error = _React$useState2[0],\n      setError = _React$useState2[1];\n\n  function onSignInTap(data) {\n    return _regeneratorRuntime.async(function onSignInTap$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setError('Sign In');\n            console.log(data);\n            console.log(JSON.stringify(data));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var onForgotTap = function onForgotTap(data) {\n    setError('Forgot Pass');\n    Alert.alert(\"Reset Password?\", \"An email with a temporary password will be sent to your email address.\", [{\n      text: \"Cancel\",\n      onPress: function onPress() {\n        return console.log(\"Cancel Pressed\");\n      },\n      style: \"cancel\"\n    }, {\n      text: \"Reset\",\n      onPress: function onPress() {\n        return resetOption(data);\n      }\n    }]);\n  };\n\n  function resetOption(data) {\n    return _regeneratorRuntime.async(function resetOption$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(\"OK Pressed\");\n            console.log(\"reset \");\n            console.log(environment['authHost']);\n            console.log(\"email \" + JSON.stringify(data));\n            console.log(data);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return _jsx(Formik, {\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    validateOnMount: true,\n    onSubmit: function onSubmit(values) {\n      return onSignInTap(values);\n    },\n    validationSchema: loginValidationSchema,\n    children: function children(_ref) {\n      var handleChange = _ref.handleChange,\n          handleBlur = _ref.handleBlur,\n          handleSubmit = _ref.handleSubmit,\n          values = _ref.values,\n          touched = _ref.touched,\n          errors = _ref.errors,\n          isValid = _ref.isValid;\n      return _jsxs(View, {\n        style: styles.container,\n        children: [_jsx(TextInput, {\n          style: [styles.formInput, {\n            borderColor: errors.email && values.email ? 'red' : 'white'\n          }],\n          placeholder: \"Email*\",\n          placeholderTextColor: \"white\",\n          className: \"form-input\",\n          onChangeText: handleChange('email'),\n          onBlur: handleBlur('email'),\n          value: values.email\n        }), errors.email && touched.email && _jsxs(Text, {\n          children: [errors.email, \" value \", errors.email && values.email ? 'true' : 'false']\n        }), _jsxs(Text, {\n          children: [values.email, \" value\"]\n        }), _jsx(TextInput, {\n          style: [styles.formInput, {\n            borderColor: errors.password && touched.password ? 'red' : 'white'\n          }],\n          placeholder: \"Password*\",\n          placeholderTextColor: \"white\",\n          className: \"form-input\",\n          secureTextEntry: true,\n          onChangeText: handleChange('password'),\n          onBlur: handleBlur('password'),\n          value: values.password\n        }), errors.password && touched.password && _jsxs(Text, {\n          children: [errors.password, \" value \", errors.password && touched.password ? 'true' : 'false']\n        }), _jsx(Text, {\n          style: styles.error,\n          class: \"error\",\n          textWrap: \"true\",\n          children: error\n        }), _jsx(View, {\n          style: {\n            opacity: !isValid ? '0.5' : '1'\n          },\n          children: _jsx(TouchableOpacity, {\n            style: styles.buttonSignIn,\n            disabled: !isValid,\n            onPress: handleSubmit,\n            children: _jsx(Text, {\n              style: styles.textSignIn,\n              children: \"Sign In\"\n            })\n          })\n        }), _jsx(View, {\n          style: {\n            opacity: !errors.email && values.email ? '1' : '0.5'\n          },\n          children: _jsx(TouchableOpacity, {\n            style: styles.buttonForgotPass,\n            disabled: !errors.email && values.email ? false : true,\n            onPress: function onPress() {\n              return onForgotTap(values.email);\n            },\n            children: _jsx(Text, {\n              style: styles.textForgotPass,\n              children: \"Forgot Password\"\n            })\n          })\n        })]\n      });\n    }\n  });\n}\n\nexport default LogIn;","map":{"version":3,"sources":["C:/Users/cathy/Desktop/winter2022/internship/Puggum-React-Login/src/components/LogIn/LogIn.js"],"names":["React","environment","styles","Formik","yup","LogIn","loginValidationSchema","object","shape","email","string","required","password","useState","error","setError","onSignInTap","data","console","log","JSON","stringify","onForgotTap","Alert","alert","text","onPress","style","resetOption","values","handleChange","handleBlur","handleSubmit","touched","errors","isValid","container","formInput","borderColor","opacity","buttonSignIn","textSignIn","buttonForgotPass","textForgotPass"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { TouchableOpacity, StyleSheet, Text, View, TextInput, Alert } from \"react-native\";\r\nimport { environment } from \"../../environment/environment\";\r\nimport styles from \"../styles.js\";\r\nimport { Formik } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\n/**\r\n * @description This class is used to display the log in form\r\n */\r\nfunction LogIn() {\r\n    const loginValidationSchema = yup.object().shape({\r\n        email: yup.string().email('Please enter valid email').required('Email is required'),\r\n        password: yup.string().required('Password is required'),\r\n    });\r\n\r\n\r\n    const [error, setError] = React.useState(null);\r\n\r\n    // const { control, handleSubmit, reset, isValid, formState: { errors } } = useForm({\r\n    //     defaultValues: {\r\n    //         email: '',\r\n    //         password: ''\r\n    //     }\r\n    // });\r\n\r\n    // console.log(\"errors \" + isEmpty(errors));\r\n\r\n    async function onSignInTap(data) {\r\n        setError('Sign In');\r\n        console.log(data);\r\n        console.log(JSON.stringify(data));\r\n        // try {\r\n        //     const response = await fetch(environment['authHost'] + 'api/user/post/login', {\r\n        //         method: 'POST',\r\n        //         headers: {\r\n        //         },\r\n        //         body: JSON.stringify(data)\r\n        //     });\r\n\r\n        //     //navigate(['friends-explore']);\r\n        //     console.log('reset email sent successfully');\r\n        // }\r\n        // catch (e) {\r\n        //     console.log('Error to reset password');\r\n        //     setError('Error to Sign In');\r\n        //}\r\n        // this._httpClient.post(\r\n        //     event.token?  mainenv['authHost']+'api/user/post/loginGoogle':mainenv['authHost']+'api/user/post/login',\r\n        //     event.token?{googleToken: event.token}:this.login.getRawValue())\r\n        //   .toPromise().then(result => {\r\n        //     console.log(result)\r\n        //     if(result['status']=='valid') {\r\n        //       ApplicationSettings.setString(\"jwt\",result['data']['jwt']);\r\n        //       ApplicationSettings.setNumber(\"timer\",result['data']['timer']);\r\n        //       this.userService.updateTokenInDatabase();\r\n        //       this.userService.isAuthenticated(true);\r\n        //       this.router.navigate(['friends-explore']);\r\n        //     }\r\n        //     else {\r\n        //         if(result['data']) {\r\n        //           this.tempReason = result['data']['message'];\r\n        //           this.changeDetection.detectChanges()\r\n        //         }\r\n        //         else {\r\n        //           console.log(result['error']);\r\n        //         }\r\n        //       }\r\n        //     }); \r\n    }\r\n\r\n    /**\r\n     * This function is used to alert the user to ask if they want to reset their password or not\r\n     */\r\n    const onForgotTap = (data) => {\r\n        setError('Forgot Pass');\r\n        Alert.alert(\r\n            \"Reset Password?\",\r\n            \"An email with a temporary password will be sent to your email address.\",\r\n            [\r\n                {\r\n                    text: \"Cancel\",\r\n                    onPress: () => console.log(\"Cancel Pressed\"),\r\n                    style: \"cancel\"\r\n                },\r\n                { text: \"Reset\", onPress: () => resetOption(data) }\r\n            ]\r\n        );\r\n    }\r\n\r\n    // const resetOption = () => {\r\n    //     console.log(\"OK Pressed\");\r\n    //     console.log(\"reset \");\r\n    //     console.log(environment['authHost']);\r\n    //     console.log(JSON.stringify(email));\r\n    //     // this._httpClient.post(\r\n    //     //     mainenv['authHost']+'api/user/post/forgotpassword',\r\n    //     //     {email: this.login.controls['email'].value})\r\n    //     //   .toPromise().then(result => {\r\n    //     //     if(result['status']=='valid') {\r\n    //     //       this.tempReason = result['data']['message'];\r\n    //     //     }\r\n    //     //     else {\r\n    //     //       console.log(result['error']);\r\n    //     //     }\r\n    //     //   });\r\n    // }\r\n\r\n    //helper method to reset password\r\n    async function resetOption(data) {\r\n        console.log(\"OK Pressed\");\r\n        console.log(\"reset \");\r\n        console.log(environment['authHost']);\r\n        console.log(\"email \" + JSON.stringify(data));\r\n        console.log(data);\r\n        // try {\r\n        //     const response = await fetch(environment['authHost'] + 'api/user/post/forgotpassword', {\r\n        //         method: 'POST',\r\n        //         headers: {\r\n        //         },\r\n        //         body: JSON.stringify(email)\r\n        //     });\r\n\r\n        //     console.log('reset email sent successfully');\r\n        // }\r\n        // catch (e) {\r\n        //     console.log('Error to reset password');\r\n        //     setError('Error to send email');\r\n        // }\r\n    }\r\n\r\n    /**\r\n       * @description render() returns a div \r\n       * @returns The div containing \r\n       */\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: '' }}\r\n            validateOnMount={true}\r\n            onSubmit={values => onSignInTap(values)}\r\n            validationSchema={loginValidationSchema}>\r\n            {({ handleChange, handleBlur, handleSubmit, values, touched, errors, isValid }) => (\r\n                <View style={styles.container}>\r\n\r\n                    <TextInput\r\n                        style={[styles.formInput, { borderColor: (errors.email && values.email) ? 'red' : 'white' }]}\r\n                        placeholder=\"Email*\"\r\n                        placeholderTextColor='white'\r\n                        className=\"form-input\"\r\n                        onChangeText={handleChange('email')}\r\n                        onBlur={handleBlur('email')}\r\n                        value={values.email}\r\n                    />\r\n                    {(errors.email && touched.email) && <Text>{errors.email} value {errors.email && values.email ? 'true' : 'false'}</Text>}\r\n                    <Text>{values.email} value</Text>\r\n\r\n                    <TextInput\r\n                        style={[styles.formInput, { borderColor: (errors.password && touched.password) ? 'red' : 'white' }]}\r\n                        placeholder=\"Password*\"\r\n                        placeholderTextColor='white'\r\n                        className=\"form-input\"\r\n                        secureTextEntry={true}\r\n                        onChangeText={handleChange('password')}\r\n                        onBlur={handleBlur('password')}\r\n                        value={values.password}\r\n                    />\r\n                    {(errors.password && touched.password) && <Text>{errors.password} value {errors.password && touched.password ? 'true' : 'false'}</Text>}\r\n\r\n                    <Text style={styles.error} class=\"error\" textWrap=\"true\" >{error}</Text>\r\n                    <View style={{ opacity: (!isValid) ? '0.5' : '1' }}>\r\n                        <TouchableOpacity\r\n                            style={styles.buttonSignIn}\r\n                            disabled={!isValid}\r\n                            onPress={handleSubmit}\r\n                        >\r\n                            <Text style={styles.textSignIn}>Sign In</Text>\r\n                        </TouchableOpacity>\r\n                    </View>\r\n                    <View style={{ opacity: (!errors.email && values.email) ? '1' : '0.5' }}>\r\n                        <TouchableOpacity\r\n                            style={styles.buttonForgotPass}\r\n                            disabled={(!errors.email && values.email) ? false : true}\r\n                            onPress={()=>onForgotTap(values.email)}\r\n                        >\r\n                            <Text style={styles.textForgotPass}>Forgot Password</Text>\r\n                        </TouchableOpacity>\r\n                    </View>\r\n\r\n                    {/* <TouchableOpacity style={styles.buttonSignInwithAG}>\r\n                    <Text style={styles.textAG}>Sign In with Apple</Text>\r\n                </TouchableOpacity>\r\n                <TouchableOpacity style={styles.buttonSignInwithAG}>\r\n                    <Text style={styles.textAG}>Sign In with Google</Text>\r\n                </TouchableOpacity> */}\r\n                </View>\r\n            )}\r\n        </Formik>\r\n    )\r\n\r\n}\r\n\r\nexport default LogIn;"]},"metadata":{},"sourceType":"module"}